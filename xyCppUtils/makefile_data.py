"""
" Makefile data.
"
"   Author: Ying Xiong
"   Created: Aug 14, 2012
"""

import commands
from datetime import datetime
import sys

uname = commands.getoutput("uname")

if (uname == "Darwin"):
    _xargs_r = "xargs"
elif (uname == "Linux"):
    _xargs_r = "xargs -r"
else:
    print "Unknown architecture \"" + uname + "\""
    sys.exit(1)

cmt_ln_sharp = "################################################################\n"

makefile_data_head = \
"""################################################################
# Makefile for xyCppUtils.
#
# Usage:
#        'make RELEASE=1 all'            make the release version.
#        'make DEBUG=1 target'           make the debug version.
#        'make MATLAB=1 MATLAB_ROOT=/path/to/matlab RELEASE=1 all'
#                                        make as a matlab library.
#        'make clean'                    removes .o and executable files.
#        'make fullclean'                also removes the third party libraries.
#
# Author: Ying Xiong.
# Generated: """ + datetime.today().strftime("%b %d, %Y") + """.
################################################################
"""

def makefile_data_config(CC, CXX, CXXFLAGS, use_tr1):
    if (use_tr1):
        tr1_defs = "-D__USE_TR1__"
    else:
        tr1_defs = ""
    return """
# Compilers.
CC := %s
CXX := %s

# Compiler flags.
CXXFLAGS = -W -Wall -Wextra -Wno-sign-compare %s

# Include directories, e.g. "-I../includes".
INCLUDES = -I.

# Library paths, e.g. "-L../libs".
LIBPATH = -L.

# Libraries, e.g. "-lm -lxxx".
LIBS = -lxyutils

# Dynamic library flags.
LDFLAGS = 

# Defines, e.g. "-Dxxx -Dyyy".
DEFS = %s

# Add matlab dependencies.
ifeq ($(MATLAB), 1)
	INCLUDES += -I$(MATLAB_ROOT)/extern/include
	LIBPATH += -L$(MATLAB_ROOT)/bin/maci64
	LIBS += -lmx -lmex -lmat -lstdc++
	DEFS += -D__MATLAB__
endif

ifeq ($(RELEASE), 1)
	CXXFLAGS += -O2 -Werror
endif

ifeq ($(DEBUG), 1)
	CXXFLAGS += -g3
	DEFS += -D__DEBUG__
endif

# Dependencies.
DEPSDIR := $(shell mkdir -p .deps; echo .deps)
DEPSFLAGS = -MMD -MF $(DEPSDIR)/$@.d -MP
DEPS = $(OBJS.o=.d)
DEPSFILES := $(wildcard $(DEPSDIR)/*.d)
""" % (CC, CXX, CXXFLAGS, tr1_defs)

# Arg1 'cc_deps': $(DEPSDIR)/ThirdParty_libname
makefile_data_build = \
"""# Default target value.
all: $(LIBxy) $(TESTS) $(BINS)

$(LIBxy): $(OBJS)
\tar r $@ $^

%%.o: %%.cc %s
\t$(CXX) $(CXXFLAGS) $(DEPSFLAGS) $(DEFS) $(INCLUDES) -c -o $@ $*.cc

ifneq ($(DEPSFILES),)
include $(DEPSFILES)
endif
"""

makefile_data_eigen = \
"""$(DEPSDIR)/ThirdParty_eigen:
\tcp -r ThirdParty/eigen/Eigen $(ThirdPartyIncPath)
\ttouch $@
test_ThirdParty_eigen:    # Empty rule.
clean_ThirdParty_eigen:    # Empty rule.
"""

makefile_data_jpeg = \
"""$(DEPSDIR)/ThirdParty_jpeg:
\tcd ThirdParty/libjpeg && ./configure --prefix=`pwd`/../ && make && make install
\ttouch $@
test_ThirdParty_jpeg:
\tcd ThirdParty/libjpeg; make test
clean_ThirdParty_jpeg:
\tcd ThirdParty/libjpeg; [ -a Makefile ] && make clean; rm -rf .deps Makefile config.log config.status jconfig.h libtool stamp-h1
"""

makefile_data_png = \
"""$(DEPSDIR)/ThirdParty_png:
\tcd ThirdParty/libpng; ./configure --prefix=`pwd`/../ && make && make install
\ttouch $@
test_ThirdParty_png:
\tcd ThirdParty/libpng; make check
clean_ThirdParty_png:
\tcd ThirdParty/libpng; [ -a Makefile ] && make clean; cat .gitignore | """ + _xargs_r + """ rm -rf
"""

makefile_data_cscope = \
"""cscope: cscope.out

cscope.out: cscope.files
	cscope -b -i $^

cscope.files:
	find `pwd` -name '*.cc' -o -name '*.h' > $@

cscope_clean:
	rm -f cscope.out cscope.files
"""

makefile_data_clean = \
"""clean: cscope_clean
\trm -f $(LIBxy) $(OBJS) $(TESTS) $(BINS)
\trm -f *.pyc *~ .*~
\tfind . -name .DS_Store | """ + _xargs_r + """ rm -rf

fullclean: clean %s
\trm -rf ThirdParty/include ThirdParty/lib ThirdParty/bin ThirdParty/share
\trm -rf *.dSYM $(DEPSDIR)

.PHONY: all clean fullclean cscope cscope_clean %s
"""

# Target library file.
libxy = "libxyutils.a" # TODO: Generate a dynamic link library.

# Libraries used by the project, in the form ("libName", "-lLIB1 -lLIB2 ...")
if (uname == "Darwin"):
    lib_sdl = "-framework SDL -framework Cocoa -framework Opengl -lSDLMain"
elif (uname == "Linux"):
    lib_sdl = "-lSDL -lGL -lGLU"
else:
    print "Unknown architecture \"" + uname + "\""
libs = (("jpeg", "-ljpeg"),
        ("png", "-lpng"),
        ("sdl", lib_sdl),)

# Object files generated by the project, in the form
#   ("XXX.o", ("lib1", "lib2",)).
all_objs = ( \
    ("Camera.o", ("eigen",)),
    ("CommandLineFlags.o", ()),
    ("EigenUtils.o", ("eigen",)),
    ("FileIO.o", ()),
    ("LogAndCheck.o", ()),
    ("NonlinearLeastSquares.o", ("eigen",)),
    ("NumericalCheck.o", ("eigen",)),
    ("PlyIO.o", ()),
    ("PointCameraViewer.o", ("sdl",)),
    ("PointEdgeViewer.o", ("sdl",)),
    ("SDLViewer.o", ("sdl",)),
    ("StringConvert.o", ()),
    ("StringUtils.o", ()),
)

# Test binaries generated by the project, in the form
#   ("XXXTest", ("lib1", "lib2",)).
all_tests = ( \
    ("CommandLineFlagsTest", ()),
    ("EigenUtilsTest", ("eigen",)),
    ("FileIOTest", ()),
    ("ImageTest", ("jpeg", "png")),
    ("LogAndCheckTest", ()),
    ("NonlinearLeastSquaresTest", ("eigen",)),
    ("NumericalCheckTest", ("eigen",)),
    ("PlyIOTest", ()),
    ("PointEdgeViewerTest", ("sdl", "jpeg",)),
    ("QuaternionTest", ()),
    ("StringUtilsTest", ()),
    ("StringConvertTest", ()),
    ("TimerTest", ()),
)
# Binary files generated by the project, in the form
#   ("runSomething", ("lib1", "lib2")).
all_bins = ( \
    ("visualizePointsAndCameras", ("sdl", "jpeg",)),
)
